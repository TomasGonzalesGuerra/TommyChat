@implements IDisposable
@inject IRepository _repository
@inject IDialogService _dialogService
@inject SweetAlertService _sweetAlertService
@inject NavigationManager _navigationManager
@inject INotificationService _notificationService

<AuthorizeView>
    <Authorized>
        <MudText Style="margin: auto;" Typo="Typo.body1" Align="Align.Center"> Hey! @FullName</MudText>
        <MudAvatar Size="Size.Medium">
            @if (!string.IsNullOrEmpty(photoUser))
            {
                <MudImage Src="@photoUser"></MudImage>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Color="Color.Primary" Size="Size.Medium"></MudIcon>
            }
        </MudAvatar>

        <MudMenu Dense Size="Size.Medium" Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit">
            <MudMenuItem OnClick="ShowModalLogOut" ForceLoad Icon="@Icons.Material.TwoTone.Logout" IconColor="Color.Error" Label="Sign Out" />

            <MudMenu StartIcon="@Icons.Material.TwoTone.Settings" IconColor="Color.Primary" Label="Settings">
                <MudMenuItem OnClick="GoToEditUser" Icon="@Icons.Material.Outlined.EditNote" IconColor="Color.Success" Label="Ediar" />
            </MudMenu>
        </MudMenu>

        <MudBadge Origin="Origin.TopRight" Content="1" Visible="@_notificationService.HasNewNotification" Color="Color.Warning" Overlap="true" Style="position: relative;">
            <MudMenu Dense Size="Size.Medium" Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit">
                @if (_notificationService.NewContat != null)
                {
                    <MudStack Class="ma-4" AlignItems="AlignItems.Start" Spacing="2">
                        <MudText Typo="Typo.h5"> 🔔 Tienes una Reserva 🎉 </MudText>
                        <MudDivider />
                        <MudText>Contact: @_notificationService.NewContat?.FullName</MudText>
                        <MudText>E-Mail @_notificationService.NewContat?.Email</MudText>
                        <MudDivider />
                        <MudStack Row="true" Class="justify-end" Style="width:100%;" Spacing="2">
                            <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="GoToAllNotifies"> Ver Todas </MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@_notificationService.Clear"> Cerrar </MudButton>
                        </MudStack>
                    </MudStack>
                }
                else
                {
                    <MudText Typo="Typo.h5" Class="ma-4"> No hay Naaa... 😒 </MudText>
                }
            </MudMenu>
        </MudBadge>
    </Authorized>

    <NotAuthorized>
        <MudContainer Style="width: auto;">
            <MudIconButton OnClick="ShowModalLogIn" Variant="Variant.Text" Icon="@Icons.Material.Outlined.Person" Color="Color.Inherit" Edge="Edge.End"> Login </MudIconButton>
            <MudIconButton OnClick="GoToRegister" Variant="Variant.Text" Icon="@Icons.Material.Outlined.AppRegistration" Color="Color.Inherit" Edge="Edge.End"> Register </MudIconButton>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private bool _loading = true;
    private int BadgeContent;
    private string? userType;
    private string? photoUser;
    private string? FullName;

    protected override void OnInitialized() => _notificationService.OnChange += StateHasChanged;
    protected override async Task OnParametersSetAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var claims = authenticationState.User.Claims.ToList();
        var photoClaim = claims.FirstOrDefault(x => x.Type == "Photo");
        var nameClaim = claims.FirstOrDefault(x => x.Type == "FullName");
        var userTypeClaim = claims.FirstOrDefault(x => x.Type == "UserType");

        if (photoClaim is not null) photoUser = photoClaim.Value;
        if (nameClaim is not null) FullName = nameClaim.Value;
        if (userTypeClaim is not null) userType = userTypeClaim.ToString();
    }

    private void GoToEditUser() => _navigationManager.NavigateTo("/EditUser");

    private void GoToRegister() => _navigationManager.NavigateTo("/Register");

    private void ShowModalLogIn()
    {
        var closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        _dialogService.ShowAsync<Login>("Log In", closeOnEscapeKey);
    }

    private void ShowModalLogOut()
    {
        var closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        _dialogService.ShowAsync<Logout>("Log Out", closeOnEscapeKey);
    }

    private void GoToAllNotifies()
    {
        _navigationManager.NavigateTo("/AllNotifications");
        _notificationService.Clear();
        Console.WriteLine($"Navigating to all notifications y Clear");
    }

    public void Dispose() => _notificationService.OnChange -= StateHasChanged;
}