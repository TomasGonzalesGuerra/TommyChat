@inject HubConnection hubConnection
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

<h3>💬 Chat Privado</h3>

<div class="mud-grid">
    <div class="mud-item mud-width-4">
        <h4>🟢 Usuarios conectados</h4>
        <ul style="list-style:none; padding-left:0;">
            @foreach (var usuario in usuariosConectados)
            {
                <li>
                    <button class="mud-button mud-button-text" @onclick="() => SeleccionarDestinatario(usuario)">
                        @usuario
                    </button>
                </li>
            }
        </ul>
    </div>

    <div class="mud-item mud-width-8">
        @if (!string.IsNullOrWhiteSpace(destinatario))
        {
            <p><strong>Conversación con:</strong> @destinatario</p>
        }

        <div style="border:1px solid #ccc; padding:10px; height:200px; overflow-y:auto; margin-bottom:10px;">
            @foreach (var mensaje in mensajes)
            {
                <p><strong>@mensaje.Remitente:</strong> @mensaje.Contenido</p>
            }
        </div>

        <textarea @bind="mensaje"
                  @ref="textareaRef"
                  rows="3"
                  style="width:100%"
                  placeholder="Escribe tu mensaje..."></textarea>

        <button class="mud-button mud-button-filled" @onclick="EnviarMensaje" disabled="@string.IsNullOrWhiteSpace(destinatario)">
            Enviar
        </button>
    </div>
</div>

@code {
    private ElementReference textareaRef;
    private DotNetObjectReference<ChatPrivado>? dotNetRef;
    private string? destinatario;
    private string? mensaje;
    private string? miEmail;
    private List<string> usuariosConectados = [];

    private List<MensajeDTO> mensajes = [];

    private class MensajeDTO
    {
        public string Remitente { get; set; } = "";
        public string Contenido { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerMiEmail();

        hubConnection.On<string, string>("RecibirMensajePrivado", (remitente, contenido) =>
        {
            mensajes.Add(new MensajeDTO { Remitente = remitente, Contenido = contenido });
            StateHasChanged();
        });

        hubConnection.On<List<string>>("UsuariosConectados", (usuarios) =>
        {
            if (!string.IsNullOrWhiteSpace(miEmail))
            {
                usuariosConectados = usuarios.Where(u => u != miEmail).ToList();
            }
            else
            {
                usuariosConectados = usuarios;
            }

            StateHasChanged();
        });

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Conexión SignalR iniciada.");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("chatInputHandler.initialize", textareaRef, dotNetRef);
        }
    }

    [JSInvokable("EnviarMensajeDesdeJS")]
    public async Task EnviarMensajeDesdeJS()
    {
        await EnviarMensaje();
    }

    private async Task ObtenerMiEmail()
    {
        var token = await localStorage.GetItemAsync<string>("jwt_token");
        if (string.IsNullOrWhiteSpace(token)) return;

        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwt = handler.ReadJwtToken(token);

        miEmail = jwt.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        Console.WriteLine($"Mi email detectado: {miEmail}");
    }

    private void SeleccionarDestinatario(string usuario)
    {
        destinatario = usuario;
        mensajes.Clear(); // Opcional: limpiar historial al cambiar de usuario
    }

    private async Task EnviarMensaje()
    {
        if (!string.IsNullOrWhiteSpace(destinatario) && !string.IsNullOrWhiteSpace(mensaje))
        {
            await hubConnection.InvokeAsync("EnviarMensajePrivado", destinatario, mensaje);
            mensajes.Add(new MensajeDTO { Remitente = "Yo", Contenido = mensaje });
            mensaje = string.Empty;
        }
    }

    private async Task DetectarEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await EnviarMensaje();
        }
    }
}

