@page "/Chats"
@using Microsoft.AspNetCore.SignalR.Client
@using TommyChat.FrontEnd.Services
@inject IRepository _repository
@inject NotifyService _notifyService
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,User")]

<PageTitle>Chats</PageTitle>

<div class="d-flex justify-center align-center gap-5">
    <MudItem xs="6">
        <MudButton OnClick="Connect" Variant="Variant.Outlined" Color="Color.Success"> Connect </MudButton>
        <MudButton OnClick="Disconnect" Variant="Variant.Outlined" Color="Color.Error"> Disconnect </MudButton>

        <div style="width:30rem;">
            @if (Messages != null)
            {
                <ul>
                    @foreach (var message in Messages)
                    {
                        <li>@message</li>
                    }
                </ul>
            }
        </div>
    </MudItem>

    <MudItem xs="6" Class="d-flex justify-center">
        <MudPaper Width="300px">
            <MudList T="string">
                @foreach (var item in UsersConnecteds)
                {
                    <MudListItem @onclick="@(() => SelectedReceiver(item.UserId!))">
                        <AvatarContent>
                            <MudAvatar Color="Color.Tertiary"> @item.UserName![0] </MudAvatar>
                        </AvatarContent>

                        <ChildContent>
                            @item.UserName
                        </ChildContent>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
</div>

@if (!string.IsNullOrEmpty(UserReceiver.UserName))
{    
    <MudPaper Class="pa-2" Style="position: absolute; bottom: 0; right: 2%; width:20rem;">
        <MudStack Spacing="2">
            <MudButton OnClick="OnExpandCollapseClick">
                <MudAvatar Color="Color.Tertiary" Class="mr-3"> @UserReceiver.UserName![0] </MudAvatar>
                @UserReceiver.UserName
            </MudButton>
            <MudDivider />

            <MudCollapse Expanded="_expanded" Style="@_expandedClas">
                <MudChat ChatPosition="ChatBubblePosition.End">
                    @if (MenssageSent.Count > 0)
                    {                    
                        @foreach (var item in MenssageSent)
                        {                    
                            <MudAvatar> Me </MudAvatar>
                            <MudChatBubble>
                                @item
                            </MudChatBubble>
                        }
                    }
                </MudChat>

                <MudChat ChatPosition="ChatBubblePosition.Start">
                    <MudAvatar> R </MudAvatar>
                    <MudChatBubble>
                        Hoaaa...
                    </MudChatBubble>
                </MudChat>
            </MudCollapse>

            @if (!string.IsNullOrWhiteSpace(_expandedClas))
            {            
                <MudItem Class="d-flex justify-space-between align-center">
                    <MudTextField @bind-Value="MessageInput" Label="Mensajea" Variant="Variant.Outlined"></MudTextField>
                    <MudIconButton OnClick="@(() => SendMessage(MessageInput))" Icon="@Icons.Material.Outlined.Send" Color="Color.Inherit" Edge="Edge.End" Style="margin-right: 0px; margin-inline-end: 0px; margin-inline-start: initial;" />
                </MudItem>
            }
        </MudStack>
    </MudPaper>
}



@code {
    private User UserMe = new();
    private User UserReceiver = new();
    private string? _expandedClas;
    HubConnection? _hubConnection;
    private bool _expanded;
    private List<string> MyChats = [];
    private List<string> Messages = [];
    private List<UsersConnectedDTO> UsersConnecteds = [];
    private string MessageInput { get; set; } = string.Empty;
    private List<string> MenssageSent = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();
        await ConnectToSignalR();
    }

    private async Task ConnectToSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7067/NotifyHub?userSellerId={UserMe.Id}&userSellerName={UserMe.FullName}")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReciveSystemMessage", ReciveSystemMessage);
        _hubConnection.On<List<UsersConnectedDTO>>("UpdateUserList", UpdateUserList);

        await _hubConnection.StartAsync();
    }

    private void Connect() => _hubConnection?.StartAsync();
    private void Disconnect() => _hubConnection?.DisposeAsync();

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await _repository.GetAsync<User>("/api/Accounts/Profile");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _navigationManager.NavigateTo("/");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await _sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        UserMe = responseHTTP.Response!;
    }

    private async Task LoadUserReceiver(string UserIdReceiver)
    {
        var responseHTTP = await _repository.GetAsync<User>($"/api/Accounts/UserIdReceiver?UserIdReceiver={UserIdReceiver}");

        try
        {
            if (responseHTTP.Error)
            {
                if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    _navigationManager.NavigateTo("/");
                    return;
                }

                var messageError = await responseHTTP.GetErrorMessageAsync();
                await _sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }

            UserReceiver = responseHTTP.Response!;
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private void ReciveSystemMessage(string message)
    {
        if (!string.IsNullOrEmpty(message))
        {
            Messages.Add(message);
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void UpdateUserList(List<UsersConnectedDTO> usersConnecteds)
    {
        if (usersConnecteds != null && usersConnecteds.Count > 0)
        {
            UsersConnecteds = usersConnecteds;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task SelectedReceiver(string UserIdReceiver)
    {
        await LoadUserReceiver(UserIdReceiver);
        OnExpandCollapseClick();
    }

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
        _expandedClas = _expanded ? "height: 15rem;" : string.Empty;
    }

    private void SendMessage(string messageInput)
    {
        MenssageSent.Add(messageInput);
        MessageInput = string.Empty;
    }

    private async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
