@page "/Chats"
@using Microsoft.AspNetCore.SignalR.Client
@using TommyChat.FrontEnd.Services
@inject IRepository _repository
@inject NotifyService _notifyService
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,User")]

<PageTitle>Chats</PageTitle>

<MudPaper Class="pa-5 ma-5">
    <MudItem xs="12">
        <MudGrid Class="pa-4">
            <MudItem xs="12">
                <MudSelect T="string" Label="Miembros del Sistema" @bind-Value="UserIdReceiver" SelectedValuesChanged="SelectedValuesChanged" Required="true" RequiredError="An Assigned Group is required." Style="width: 30rem;">
                    @foreach (var item in AllOnLineUsers)
                    {
                        <MudSelectItem Value="@item.Id">
                            <MudAvatar Color="Color.Tertiary"> @item.UserName![0] </MudAvatar> - @item.UserName
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudPaper>

<MudPaper Class="pa-5 ma-5">
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>

    <MudButton OnClick="SendMessage" Disabled = "@(!IsConnected)" Variant="Variant.Outlined" Color="Color.Success"> Enviar </MudButton>
</MudPaper>
<MudTHeadRow />
<MudPaper Class="pa-5 ma-5">
    <MudButton OnClick="Connect" Variant="Variant.Outlined" Color="Color.Success"> Connect </MudButton>
    <MudButton OnClick="Disconnect" Variant="Variant.Outlined" Color="Color.Error"> Disconnect </MudButton>

    <div style="width:30rem;">
        @if (Messages != null)
        {
            <ul>
                @foreach (var message in Messages)
                {
                    <li>@message</li>
                }
            </ul>
        }
    </div>

    <div>
        @if (MyChats != null)
        {
            <ul>
                @foreach (var message in MyChats)
                {
                    <li>@message</li>
                }
            </ul>
        }
    </div>

    <MudText> @_notifyService.ConnectionState.ToString() </MudText>
</MudPaper>
<MudTHeadRow />


@code {
    private User UserMe = new();
    private string? messageInput;
    private List<string> Messages = [];
    private List<string> MyChats = [];
    private List<UserDT> AllOnLineUsers = [];
    private string UserIdReceiver { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _notifyService.ConnectionStateChanged += StateHasChanged;
        _notifyService._hubConnection.On<string>("AllClientsNotify", (statement) =>
        {
            Messages.Add(statement);
            InvokeAsync(() => StateHasChanged());
            Console.WriteLine($"Mensaje de Entrada");
        });
        _notifyService._hubConnection.On<string, string>("SendPrivateMessage", (senderUserId, message) =>
        {
            MyChats.Add(message);
            InvokeAsync(() => StateHasChanged());
            Console.WriteLine($"Mensaje de {senderUserId}: {message}");
        });



        await Connect();
        await LoadUserAsyc();
        await GetAllOnLineUserAsyc();
    }

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await _repository.GetAsync<User>($"/api/Accounts/Profile");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _navigationManager.NavigateTo("/");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await _sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        UserMe = responseHTTP.Response!;
    }

    private async Task GetAllOnLineUserAsyc()
    {
        try
        {
            var responseHppt = await _repository.GetAsync<List<UserDT>>("/api/Accounts/UsersNames");
            AllOnLineUsers = responseHppt.Response!;
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedValuesChanged()
    {
        try
        {
            Console.WriteLine($"UserMe: {UserMe.FullName} => {UserMe.Id}");
            Console.WriteLine($"UserIdReceiver: {UserIdReceiver}");
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    public async Task Connect() => await _notifyService.StartConnectionAsync();
    public async Task Disconnect() => await _notifyService.CloseConnectionAsync();
    public bool IsConnected => _notifyService._hubConnection.State == HubConnectionState.Connected;

    public async Task SendMessage()
    {
        await Connect();
        Console.WriteLine($"UserMe: {UserMe.FullName} => {UserMe.Id}");
        Console.WriteLine($"UserIdReceiver: {UserIdReceiver}");
        Console.WriteLine($"messageInput: {messageInput}");
        await _notifyService.SendPrivateMessageAsync(UserMe.Id, UserIdReceiver, messageInput!);
    }



    public async ValueTask DisposeAsync()
    {
        if (_notifyService._hubConnection is not null)
        {
            await _notifyService._hubConnection.DisposeAsync();
        }
    }


    public class UserDT
    {
        public string Id { get; set; }
        public string UserName { get; set; }
    }
}
