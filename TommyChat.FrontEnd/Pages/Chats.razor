@page "/ChatConnented"
@using System.Security.Claims;
@inject HubConnection hubConnection
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IRepository _repository
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,User")]

<PageTitle>Chats Privados </PageTitle>

<MudPaper Class="pa-4" Style="border-radius:1rem;">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h6">Usuarios conectados 🟢</MudText>

        @foreach (var user in usuariosConectados)
        {
            <MudStack Row="true" @onclick="@(() => SeleccionarDestinatario(user))"
                      Style="cursor:pointer; border-radius:8px;"
                      Class="px-2 py-1 hover-contact card-fade-in"
                      AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudAvatar Size="Size.Medium" Color="Color.Success">@user[0]</MudAvatar>
                    <MudText Typo="Typo.body1">@user</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Chat" Size="Size.Small" />
                </MudStack>
            </MudStack>
        }
    </MudStack>
</MudPaper>



@foreach (var usuario in chatsAbiertos.Keys)
{
    string estilo = $"position: absolute; bottom: 0; right: {20.5 * chatsAbiertos.Keys.ToList().IndexOf(usuario)}rem; width:20rem;";
    <MudPaper Class="pa-1" Style="@estilo" >
        <MudStack Spacing="2">
            <!-- Encabezado siempre visible -->
            <MudButton OnClick="@(() => ToggleChat(usuario))" FullWidth="true">
                <MudAvatar Color="Color.Tertiary" Class="mr-3">@usuario[0]</MudAvatar>
                @usuario

                @if (conversaciones.ContainsKey(usuario))
                {
                    var noLeidos = conversaciones[usuario].Count(m => !m.Leido && m.Remitente != miEmail);
                    if (noLeidos > 0 && !chatsAbiertos[usuario])
                    {
                        <MudBadge Color="Color.Error" Content="@noLeidos" Class="ml-2" />
                    }
                }
            </MudButton>

            <MudCollapse Expanded="_expanded" Style="@_expandedClas" Class="animate-chat">
                @foreach (var item in conversaciones[usuario])
                {
                    <MudChat ChatPosition="@(item.Remitente == miEmail ? ChatBubblePosition.End : ChatBubblePosition.Start)">
                        <MudChatHeader Time="@_nowTime" />
                        <MudChatBubble> @item.Contenido </MudChatBubble>
                        @if (item.Remitente != miEmail)
                        {                    
                            <MudChatFooter>
                                <MudText Typo="Typo.caption" Color="@(item.Leido ? Color.Default : Color.Error)">
                                    @(item.Leido ? "Leído" : "No leído")
                                </MudText>
                            </MudChatFooter>
                        }
                    </MudChat>
                }
            </MudCollapse>
            
            @if (!string.IsNullOrWhiteSpace(_expandedClas))
            {
                <MudItem Class="d-flex justify-space-between align-center mt-2">
                    <MudTextField T="string"
                                  @bind-Value="_userInput"
                                  Immediate="true"
                                  TextUpdateSuppression="false"
                                  KeyDownPreventDefault="_preventDefault"
                                  OnKeyDown="@((KeyboardEventArgs e) => HandleKeyDown(e, usuario))"
                                  Label="Mensaje"
                                  Variant="Variant.Outlined" />

                    <MudIconButton OnClick="@(() => EnviarMensaje(usuario))" Icon="@Icons.Material.Outlined.Send" />
                </MudItem>
            }
        </MudStack>
    </MudPaper>
}



@code {
    private bool _expanded;
    private bool _preventDefault;
    private string _userInput = string.Empty;
    private List<MensajeDTO> mensajes = [];
    private List<string> usuariosConectados = [];
    private Dictionary<string, bool> chatsAbiertos = new();
    private Dictionary<string, List<MensajeDTO>> conversaciones = new();
    private string _nowTime = DateTime.Now.ToLocalTime().ToString();
    private string miEmail { get; set; } = string.Empty;
    private string mensaje { get; set; } = string.Empty;
    private string _expandedClas { get; set; } = string.Empty;
    private string destinatario { get; set; } = string.Empty;

    private class MensajeDTO
    {
        public string Remitente { get; set; } = string.Empty;
        public string Contenido { get; set; } = string.Empty;
        public bool Leido { get; set; } = false;
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerMiEmail();

        hubConnection.On<string, string>("RecibirMensajePrivado", RecibirMensajePrivado);
        hubConnection.On<List<string>>("UsuariosConectados", UsuariosConectados);
        if (hubConnection.State == HubConnectionState.Disconnected) await hubConnection.StartAsync();
    }

    private void RecibirMensajePrivado(string remitente, string contenido)
    {
        if (!conversaciones.ContainsKey(remitente))
        {
            conversaciones[remitente] = new();
            _userInput = string.Empty;
            chatsAbiertos[remitente] = true;
        }

        conversaciones[remitente].Add(new MensajeDTO { Remitente = remitente, Contenido = contenido });
        InvokeAsync(() => StateHasChanged());
    }

    private void UsuariosConectados(List<string> usuarios)
    {
        if (!string.IsNullOrWhiteSpace(miEmail))
        {            
            usuariosConectados = usuarios.Where(u => u != miEmail).ToList();
        }
        else
        {            
            usuariosConectados = usuarios;
        }
        usuariosConectados = usuarios;

        InvokeAsync(() => StateHasChanged());
    }

    private async Task ObtenerMiEmail()
    {
        var token = await localStorage.GetItemAsync<string>("JwtKey");
        if (string.IsNullOrWhiteSpace(token)) return;

        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwt = handler.ReadJwtToken(token);

        miEmail = jwt.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)!.Value;
    }

    private async Task EnviarMensaje(string destinatario)
    {
        if (!string.IsNullOrWhiteSpace(_userInput))
        {
            await hubConnection.InvokeAsync("EnviarMensajePrivado", destinatario, _userInput);
            conversaciones[destinatario].Add(new MensajeDTO { Remitente = miEmail, Contenido = _userInput });
            _userInput = string.Empty;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, string destinatario)
    {
        _preventDefault = e.Key == "Enter" && !e.ShiftKey;

        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await EnviarMensaje(destinatario);
        }
    }

    private async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void SeleccionarDestinatario(string usuario)
    {
        if (!chatsAbiertos.ContainsKey(usuario))
        {
            chatsAbiertos[usuario] = true;
            conversaciones[usuario] = new();
            _userInput = string.Empty;
            _expanded = !_expanded;
            _expandedClas = _expanded ? "height: 15rem;" : string.Empty;
        }
        else
        {
            chatsAbiertos[usuario] = true;
        }
    }

    private void ToggleChat(string usuario)
    {
        if (chatsAbiertos.ContainsKey(usuario))
        {
            _expanded = !_expanded;
            _expandedClas = _expanded ? "height: 15rem;" : string.Empty;
            chatsAbiertos[usuario] = !chatsAbiertos[usuario];

            if (chatsAbiertos[usuario] && conversaciones.ContainsKey(usuario))
            {
                foreach (var mensaje in conversaciones[usuario])
                {
                    mensaje.Leido = true;
                }
            }
        }
    }

   


}