@page "/ChatPrivado"
@inject HubConnection hubConnection
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IRepository _repository
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,User")]

<PageTitle>Chats Privados </PageTitle>

<MudGrid>
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-4">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h6"> 🟢 Conectados </MudText>
                @foreach (var item in usuariosConectados)
                {
                    <MudStack Row="true" @onclick="@(() => SeleccionarDestinatario(item))">
                        @* @if (string.IsNullOrEmpty(item.UserPhoto))
                        {
                            <MudAvatar Color="Color.Tertiary"> @item.UserName![0] </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Size="Size.Large"> <MudImage Src="@item.UserName" /> </MudAvatar>
                        } *@
                        <MudStack Justify="Justify.Center" Spacing="0">
                            @* <MudText Typo="Typo.body1"> @item.UserName </MudText>
                            <MudText Typo="Typo.body2"> @item.UserEmail </MudText> *@
                            <MudText Typo="Typo.body2"> @item </MudText>
                        </MudStack>
                    </MudStack>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>


@foreach (var usuario in chatsAbiertos.Keys)
{
    string estilo = $"position: absolute; bottom: 0; right: {20 * chatsAbiertos.Keys.ToList().IndexOf(usuario)}rem; width:20rem;";
    <MudPaper Class="pa-2" Style="@estilo">
        <MudStack Spacing="2">
            <!-- Encabezado siempre visible -->
            <MudButton OnClick="@(() => ToggleChat(usuario))" FullWidth="true">
                <MudAvatar Color="Color.Tertiary" Class="mr-3">@usuario[0]</MudAvatar>
                @usuario
            </MudButton>

            <MudCollapse Expanded="_expanded" Style="@_expandedClas">
                    @foreach (var item in conversaciones[usuario])
                    {
                        <MudChat ChatPosition="@(item.Remitente == miEmail ? ChatBubblePosition.End : ChatBubblePosition.Start)">
                            @if (item.Remitente == miEmail)
                            {
                                <MudAvatar> Yo </MudAvatar>                    
                            }
                            else
                            {
                                <MudAvatar> @usuario[0] </MudAvatar>
                            }
                            <MudChatBubble>
                                @item.Contenido
                            </MudChatBubble>
                        </MudChat>
                    }
            </MudCollapse>
            
            @if (!string.IsNullOrWhiteSpace(_expandedClas))
            {
                <MudItem Class="d-flex justify-space-between align-center mt-2">
                    <MudTextField @bind-Value="mensajeTemporal[usuario]" Label="Mensaje" Variant="Variant.Outlined" OnKeyDown="@(e => DetectarEnter(e, usuario))" />
                    <MudIconButton OnClick="@(() => EnviarMensaje(usuario))" Icon="@Icons.Material.Outlined.Send" />
                </MudItem>
            }
        </MudStack>
    </MudPaper>
}


@code {
    private string miEmail { get; set; } = string.Empty;
    private List<string> usuariosConectados = new();
    private Dictionary<string, bool> chatsAbiertos = new(); // usuarioEmail => expandido
    private Dictionary<string, List<MensajeDTO>> conversaciones = new(); // usuarioEmail => mensajes
    private Dictionary<string, string> mensajeTemporal = new(); // usuario => mensaje actual
    private bool _expanded;
    private string _expandedClas { get; set; } = string.Empty;
    private string destinatario { get; set; } = string.Empty;
    private string mensaje { get; set; } = string.Empty;
    private List<MensajeDTO> mensajes = [];

    private class MensajeDTO
    {
        public string Remitente { get; set; } = string.Empty;
        public string Contenido { get; set; } = string.Empty;
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerMiEmail();

        hubConnection.On<string, string>("RecibirMensajePrivado", (remitente, contenido) =>
        {
            if (!conversaciones.ContainsKey(remitente))
            {
                conversaciones[remitente] = new();
                mensajeTemporal[remitente] = "";
                chatsAbiertos[remitente] = true;
            }

            conversaciones[remitente].Add(new MensajeDTO { Remitente = remitente, Contenido = contenido });
            StateHasChanged();
        });

        hubConnection.On<List<string>>("UsuariosConectados", (usuarios) =>
        {
            if (!string.IsNullOrWhiteSpace(miEmail))
            {
                usuariosConectados = usuarios.Where(u => u != miEmail).ToList();
            }
            else
            {
                usuariosConectados = usuarios;
            }

            StateHasChanged();
        });

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Conexión SignalR iniciada.");
        }
    }

    private async Task ObtenerMiEmail()
    {
        var token = await localStorage.GetItemAsync<string>("jwt_token");
        if (string.IsNullOrWhiteSpace(token)) return;

        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwt = handler.ReadJwtToken(token);

        miEmail = jwt.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        Console.WriteLine($"Mi email detectado: {miEmail}");
    }

    private void SeleccionarDestinatario(string usuario)
    {
        if (!chatsAbiertos.ContainsKey(usuario))
        {
            chatsAbiertos[usuario] = true;
            conversaciones[usuario] = new();
            mensajeTemporal[usuario] = "";
        }
        else
        {
            chatsAbiertos[usuario] = true;
        }
    }

    private void ToggleChat(string usuario)
    {
        if (chatsAbiertos.ContainsKey(usuario))
        {
            chatsAbiertos[usuario] = !chatsAbiertos[usuario];
            _expanded = !_expanded;
            _expandedClas = _expanded ? "height: 15rem;" : string.Empty;
        }
    }

    private async Task EnviarMensaje(string destinatario)
    {
        var mensaje = mensajeTemporal[destinatario];
        if (!string.IsNullOrWhiteSpace(mensaje))
        {
            await hubConnection.InvokeAsync("EnviarMensajePrivado", destinatario, mensaje);
            conversaciones[destinatario].Add(new MensajeDTO { Remitente = miEmail, Contenido = mensaje });
            mensajeTemporal[destinatario] = "";
        }
    }

    private async Task DetectarEnter(KeyboardEventArgs e, string destinatario)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await EnviarMensaje(destinatario);
        }
    }

    private async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
