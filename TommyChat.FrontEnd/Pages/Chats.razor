@page "/ChatConnented"
@attribute [Authorize(Roles = "SuperAdmin,User")]
@implements IAsyncDisposable
@inject IRepository _repository
@inject HubConnection hubConnection
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@inject ILocalStorageService localStorage

<PageTitle>Chats Privados </PageTitle>

@if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
{
    <MudText Color="Color.Warning">Conectando al chat...</MudText>
}
else
{
    <MudPaper Class="pa-4" Style="border-radius:1rem;">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">Usuarios conectados 🟢</MudText>

            @foreach (var user in usuariosConectados)
            {
                <MudStack Row="true" @onclick="@(() => SeleccionarDestinatario(user))"
                          Style="cursor:pointer; border-radius:8px;"
                          Class="px-2 py-1 hover-contact card-fade-in"
                          AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                        <MudAvatar Size="Size.Medium" Color="Color.Success">@user[0]</MudAvatar>
                        <MudText Typo="Typo.body1">@user</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Chat" Size="Size.Small" />
                    </MudStack>
                </MudStack>
            }
        </MudStack>
    </MudPaper>

    @foreach (var usuario in chatsAbiertos.Keys)
    {
        var index = chatsAbiertos.Keys.ToList().IndexOf(usuario);
        <ChatWindow Usuario="@usuario"
                    Conversaciones="@conversaciones[usuario]"
                    MiEmail="@miEmail"
                    HubConnection="@hubConnection"
                    RightOffset="@(21 * index)"
                    OnToggleExpand="@ToggleExpandido"
                    OnLeido="@MarcarComoLeido" />
    }
}


@code {
    private bool _disposed;
    private bool _preventDefault;
    private List<string> usuariosConectados = [];
    private string miEmail { get; set; } = string.Empty;
    private Dictionary<string, bool> chatsAbiertos = new();
    private CancellationTokenSource _cts = new();
    private Dictionary<string, List<MensajeDTO>> conversaciones = new();


    protected override async Task OnInitializedAsync()
    {
        await ObtenerMiEmail();
        if (_disposed) return;
        try
        {
            if (hubConnection.State != HubConnectionState.Connected)
                await hubConnection.StartAsync();

            if (hubConnection.State == HubConnectionState.Connected)
            {
                hubConnection.On<string, string>("RecibirMensajePrivado", RecibirMensajePrivado);
                hubConnection.On<List<string>>("UsuariosConectados", UsuariosConectados);
            }
        }
        catch (ObjectDisposedException)
        {
            // Ya fue destruido, ignorar
        }
    }

    private void RecibirMensajePrivado(string remitente, string contenido)
    {
        if (!conversaciones.ContainsKey(remitente))
        {
            conversaciones[remitente] = new();
            chatsAbiertos[remitente] = true;
        }

        conversaciones[remitente].Add(new MensajeDTO { Remitente = remitente, Contenido = contenido });
        StateHasChanged();
    }

    private void UsuariosConectados(List<string> usuarios)
    {
        if (!string.IsNullOrWhiteSpace(miEmail))
        {            
            usuariosConectados = usuarios.Where(u => u != miEmail).ToList();
        }
        else
        {            
            usuariosConectados = usuarios;
        }

        StateHasChanged();
    }

    private async Task ObtenerMiEmail()
    {
        var token = await localStorage.GetItemAsync<string>("JwtKey");
        if (string.IsNullOrWhiteSpace(token)) return;

        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwt = handler.ReadJwtToken(token);

        miEmail = jwt.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)!.Value;
    }

    private void SeleccionarDestinatario(string usuario)
    {
        if (!chatsAbiertos.ContainsKey(usuario))
        {
            chatsAbiertos[usuario] = true;
            conversaciones[usuario] = new();
        }
        else
        {
            chatsAbiertos[usuario] = true;
        }
    }

    private Task ToggleExpandido(string usuario) => Task.CompletedTask;

    private Task MarcarComoLeido(string usuario)
    {
        if (conversaciones.ContainsKey(usuario))
        {
            foreach (var mensaje in conversaciones[usuario])
            {
                mensaje.Leido = true;
            }
        }

        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_disposed) return;
        _disposed = true;

        _cts.Cancel();
        _cts.Dispose();

        if (hubConnection is not null)
        {
            try
            {
                await hubConnection.StopAsync(); // Buena práctica antes de Dispose
                await hubConnection.DisposeAsync();
            }
            catch
            {
                // Ignorar errores de desconexión
            }
        }
    }
}
