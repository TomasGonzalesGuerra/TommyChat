@page "/Chats"
@using Microsoft.AspNetCore.SignalR.Client
@using TommyChat.FrontEnd.Services
@inject IRepository _repository
@inject NotifyService _notifyService
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,User")]

<PageTitle>Chats</PageTitle>

<div class="d-flex justify-center align-center gap-5">
    <MudItem xs="6">
        <MudSelect T="string" Label="Miembros del Sistema" @bind-Value="UserIdReceiver" SelectedValuesChanged="SelectedValuesChanged" Required="true" RequiredError="An Assigned Group is required." Style="width: 30rem;">
            @foreach (var item in UsersConnecteds)
            {
                <MudSelectItem Value="@item.UserId">
                    <MudAvatar Color="Color.Tertiary"> @item.UserName![0] </MudAvatar> - @item.UserName
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6" Class="d-flex justify-center">
        <MudPaper Width="300px">
            <MudList T="string">
                @foreach (var item in UsersConnecteds)
                {
                    <MudListItem>
                        <AvatarContent>
                            <MudAvatar Color="Color.Tertiary"> @item.UserName![0] </MudAvatar>
                        </AvatarContent>

                        <ChildContent>
                            @item.UserName - @item.UserId
                        </ChildContent>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
</div>

<MudPaper Class="pa-5 ma-5">
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>

    <MudButton Variant="Variant.Outlined" Color="Color.Success"> Enviar </MudButton>
</MudPaper>
<MudTHeadRow />
<MudPaper Class="pa-5 ma-5">
    @* <MudButton OnClick="Connect" Variant="Variant.Outlined" Color="Color.Success"> Connect </MudButton>
    <MudButton OnClick="Disconnect" Variant="Variant.Outlined" Color="Color.Error"> Disconnect </MudButton> *@

    <div style="width:30rem;">
        @if (Messages != null)
        {
            <ul>
                @foreach (var message in Messages)
                {
                    <li>@message</li>
                }
            </ul>
        }
    </div>
</MudPaper>
<MudTHeadRow />


@code {
    HubConnection? _hubConnection;
    private User UserMe = new();
    private string? messageInput;
    private List<string> Messages = [];
    private List<string> MyChats = [];
    private List<UsersConnectedDTO> UsersConnecteds = [];
    private string UserIdReceiver { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();
        await ConnectToSignalR();
    }

    public async Task ConnectToSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7067/NotifyHub?userSellerId={UserMe.Id}&userSellerName={UserMe.FullName}")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReciveSystemMessage", ReciveSystemMessage);
        _hubConnection.On<List<UsersConnectedDTO>>("UpdateUserList", UpdateUserList);

        await _hubConnection.StartAsync();
    }

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await _repository.GetAsync<User>($"/api/Accounts/Profile");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _navigationManager.NavigateTo("/");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await _sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        UserMe = responseHTTP.Response!;
    }

    private async Task SelectedValuesChanged()
    {
        try
        {
            Console.WriteLine($"UserMe: {UserMe.FullName} => {UserMe.Id}");
            Console.WriteLine($"UserIdReceiver: {UserIdReceiver}");
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private void ReciveSystemMessage(string message)
    {
        if (!string.IsNullOrEmpty(message))
        {
            Messages.Add(message);
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void UpdateUserList(List<UsersConnectedDTO> usersConnecteds)
    {
        if (usersConnecteds != null && usersConnecteds.Count > 0)
        {
            UsersConnecteds = usersConnecteds;
            InvokeAsync(() => StateHasChanged());
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
